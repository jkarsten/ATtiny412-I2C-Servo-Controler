// =====================================
//  ATtiny412 - I²C Servo Controler
// =====================================
// https://github.com/jkarsten/ATtiny412-I2C-Servo-Controler
//
// BOD Mode when Active /Sleeping:  "Enabled/Enabled"
// BOD Voltage Level:               "4.2V (20 MHZ or less)"
// Chip:        "ATtiny412"
// Clock:       "20 MHz internal"
// PWN pins:    "PA1-3, 7 (default)"
// Save EEPROM: "EEPROM retained"
//
// VCC,   Pin 1
//        Pin 2, 0, PA6
// Servo, Pin 3, 1, PA7
// SDA,   Pin 4, 2, PA1
// SCL,   Pin 5, 3, PA2
// UPDI   Pin 6, 5, PA0
// LED,   Pin 7, 4, PA3
// GND,   Pin 8

// Todo´s
// =======================================
// ✅ Hinzufügen von attach(pin, min, max) MIN und MAX mit Speicherung im EEPROM -> Umgesetzt
//
// ✅ Detach des Servos nach erreichen des Ziels durch Flag gesteuert
//
// ✅ Command zum Blinken (Auffinden eines Moduls) hinzufügen
//
// ✅ Rückmeldung der Werte per I²C
//
// ✅ Prüfen das ServoAnfang <= ServoEnde bleibt
//
// ✅ EEPROM - Lesen schreiben durch Checksum validieren
//

// I²C
// ---------------------------------------
#include <Wire.h>
#define I2C_ADRESSE_MIN 0x03  // Kleinste gültige I2C-Adresse
#define I2C_ADRESSE_MAX 0x77  // Größte gültige I2C-Adresse
#define I2C_BUFFER_SIZE 2     // Maximale anzahl der übertragenen Bytes als Buffergröße
//uint8_t I2CAdresse = 8;       // Default I2C-Adresse
uint8_t i2cRead[I2C_BUFFER_SIZE];


// EEPROM
// ---------------------------------------
#include <avr/eeprom.h>

#define EEPROM_ADDR_START_POSITION 0x00
#define EEPROM_ADDR_ANFANG 0x01
#define EEPROM_ADDR_ENDE 0x02
#define EEPROM_ADDR_SPEED 0x03
#define EEPROM_ADDR_I2C_ADRESSE 0x04
#define EEPROM_ADDR_PULSE_MIN 0x05  // Word: 0x05 + 0x06
#define EEPROM_ADDR_PULSE_MAX 0x07  // Word: 0x07 + 0x08
#define EEPROM_ADDR_CHECKSUM 0x09


// Servo
// ---------------------------------------
// #include <Servo_megaTinyCore.h>
#include "Servo412.h"
#define SERVO_ANFANG_MIN 0    // Minimum für Servo Anfang
#define SERVO_ANFANG_MAX 180  // Maximum für Servo Anfang
#define SERVO_ENDE_MIN 0      // Minimum für Servo Ende
#define SERVO_ENDE_MAX 180    // Maximum für Servo Ende
#define SERVO_SPEED_MIN 0     // Minimum für Servo Geschwindigkeit |   0 = Keine Verzögerung
#define SERVO_SPEED_MAX 100   // Maximum für Servo Geschwindigkeit | 100 = 100 Millisekunden Verzögerung
#define SERVO_PULSE_MIN 500   // Minimale Pulsweite in Mikrosekunden für den Servo | default 544
#define SERVO_PULSE_MAX 2500  // Maximale Pulsweite in Mikrosekunden für den Servo | default 2400

#define SERVO_PIN 1
Servo Servo1;  // create servo object to control a servo

struct ServoConfig {
  uint8_t start = 90;                   // ServoStartPosition  (EEPROM: 0x00)
  uint8_t anfang = SERVO_ANFANG_MIN;    // ServoAnfang         (EEPROM: 0x01)
  uint8_t ende = SERVO_ENDE_MAX;        // ServoEnde           (EEPROM: 0x02)
  uint8_t speed = SERVO_SPEED_MIN;      // ServoSpeed          (EEPROM: 0x03)
  uint8_t i2cadresse = 8;               // I2C-Adresse         (EEPROM: 0x04)
  uint16_t pulseMin = SERVO_PULSE_MIN;  // PulseMin            (EEPROM: 0x05 + 0x06)
  uint16_t pulseMax = SERVO_PULSE_MAX;  // PulseMax            (EEPROM: 0x07 + 0x08)
  uint8_t checksum = 0;                 // Prüfsumme           (EEPROM: 0x09)
};
ServoConfig config;

uint8_t ServoPosition = 90;
uint8_t ServoZielPos = 90;
unsigned long ServoLetzteBewegung = 0;
bool detachNachBewegung = false;  // Flag ob Servo nach der Bewegung getrennt werden soll
bool ServoAttached = false;       // Zustand des Servos - Verbunden = true / Getrennt = false


// Allgemein
// ---------------------------------------
#define MODUL_ID_SERVO 0x02                 // Modulkennung (0x02 = Attiny 412 I2C Servo Controler)
#define Toggle_Led (VPORTA.OUT ^= PIN3_bm)  // LED Wechsel um Empfang von Daten zu visualisieren
volatile uint8_t Befehl = 0;                // Zu verarbeitender Befehl
volatile uint16_t Wert = 0;                 // Wert für den Befehl (z. B. Position, Geschwindigkeit, I²C Adresse)
volatile bool I2C_Empfang = false;          // Flag, dass neue Daten vorhanden sind
bool blinkeLED = false;                     // Flag für LED Blinken


// =====================================
//  SETUP
// =====================================
void setup() {
  VPORTA.DIR |= PIN3_bm;  // LED PIN als Ausgang

  config.start = readEEPROMByte((uint8_t*)EEPROM_ADDR_START_POSITION, SERVO_ANFANG_MIN, SERVO_ENDE_MAX);    // ServoStartPosition aus dem EEPROM lesen
  config.anfang = readEEPROMByte((uint8_t*)EEPROM_ADDR_ANFANG, SERVO_ANFANG_MIN, SERVO_ANFANG_MAX);         // ServoAnfang aus dem EEPROM lesen
  config.ende = readEEPROMByte((uint8_t*)EEPROM_ADDR_ENDE, SERVO_ENDE_MIN, SERVO_ENDE_MAX);                 // ServoEnde aus dem EEPROM lesen
  config.speed = readEEPROMByte((uint8_t*)EEPROM_ADDR_SPEED, SERVO_SPEED_MIN, SERVO_SPEED_MAX);             // ServoSpeed aus dem EEPROM lesen
  config.i2cadresse = readEEPROMByte((uint8_t*)EEPROM_ADDR_I2C_ADRESSE, I2C_ADRESSE_MIN, I2C_ADRESSE_MAX);  // I2CAdresse aus dem EEPROM lesen
  config.pulseMin = readEEPROMWord((uint16_t*)EEPROM_ADDR_PULSE_MIN, SERVO_PULSE_MIN, SERVO_PULSE_MAX);     // ServoPulseMin aus dem EEPROM lesen
  config.pulseMax = readEEPROMWord((uint16_t*)EEPROM_ADDR_PULSE_MAX, SERVO_PULSE_MIN, SERVO_PULSE_MAX);     // ServoPulseMax aus dem EEPROM lesen

  config.checksum = eeprom_read_byte((uint8_t*)EEPROM_ADDR_CHECKSUM);  // Checksum aus dem EEPROM lesen


  // Prüfe alle gespeicherten EEPROM-Werte
  if (config.start == 255 || config.anfang == 255 || config.ende == 255 || config.speed == 255 || config.pulseMin == 0xFFFF || config.pulseMax == 0xFFFF || config.i2cadresse == 255  || !verifyChecksum() ) { // 
    // Schnelles Blinken bei Fehler
    while (true) {
      VPORTA.OUT |= PIN3_bm;  // LED an
      delay(100);
      VPORTA.OUT &= ~PIN3_bm;  // LED aus
      delay(100);
    }
  }

  Wire.begin(config.i2cadresse);  // Beginne I2C als Slave mit Adresse 8
  Wire.onReceive(receiveEvent);   // Callback-Funktion bei Empfang von Daten
  Wire.onRequest(requestEvent);   // Funktion für I²C-Anfrage

  Servo1.attach(SERVO_PIN, config.pulseMin, config.pulseMax);  // Servo an Pin Servo_PIN anschließen (wähle den entsprechenden Pin)
  ServoAttached = true;
  Servo1.write(config.start);  // ServoAnfang
  ServoPosition = config.start;
  ServoZielPos = config.start;
  delay(100);
}

// =====================================
//  LOOP
// =====================================
void loop() {

  // Befehle
  // Gehe zu Position         XXXX 0000
  // Gehe zum Anfang          XXXX 0001
  // Gehe zum Ende            XXXX 0010
  // Setze Speed              XXXX 0100
  // Frage Werte ab           XXXX 0110 (Befehl 0110 wird an der Zentrale zum Abfragen - Wire.requestFrom verwenden)
  // Blink LED                XXXX 0111

  // Speicher Servo Puls Min  XXXX 1001
  // Speicher Servo Puls Max  XXXX 1010
  // Speicher Anfang          XXXX 1100
  // Speicher Ende            XXXX 1101
  // Speicher Geschwindigkeit XXXX 1110
  // Neue I²C Adresse         XXXX 1111

  // Flags
  // Detach Servo nach Bewegung   1XXX BBBB


  if (I2C_Empfang) {                                      // Verarbeitung des Befehls
    detachNachBewegung = false;                           // Reset des Flags für jeden neuen Befehl
    detachNachBewegung = (i2cRead[0] & 0b10000000) != 0;  // Prüfe auf gesetztes Detach-Bit (Bit 7)
    Befehl = Befehl & 0b00001111;                         // Befehle extrahieren - Untere 4 Bits

    switch (Befehl) {
      case 0b00000000:  // Gehe zu Position
        if (Wert >= config.anfang && Wert <= config.ende) {
          ServoZielPos = Wert;
        }
        break;
      case 0b00000001:  // Gehe zum Anfang
        ServoZielPos = config.anfang;
        break;
      case 0b00000010:  // Gehe zum Ende
        ServoZielPos = config.ende;
        break;
      case 0b00000100:  // Setze Speed
        if (Wert >= SERVO_SPEED_MIN && Wert <= SERVO_SPEED_MAX) {
          config.speed = Wert;
        }
        break;
      case 0b00000111:  // LED blinken an/aus
        blinkeLED = (Wert == 1);
        break;
      case 0b00001001:  // Speicher Servo Puls Min
        if (Wert >= SERVO_PULSE_MIN && Wert <= SERVO_PULSE_MAX) {
          config.pulseMin = Wert;
          eeprom_write_word((uint16_t*)EEPROM_ADDR_PULSE_MIN, config.pulseMin);  // Speichere die Übermittelte Pulsweite Min ins EEPROM
          updateChecksum();
          Servo1.detach();  // Trenne den Servo vom Pin
          //delay(50);                                                           // Warten, damit der Servo Zeit hat, sich zu lösen
          Servo1.attach(SERVO_PIN, config.pulseMin, config.pulseMax);  // Setze den neuen PulseMin für den Servo
          Servo1.write(ServoPosition);                                 // Setze die aktuelle Position auf die neue Pulsweite
        }
        break;
      case 0b00001010:  // Speicher Servo Puls Max
        if (Wert >= SERVO_PULSE_MIN && Wert <= SERVO_PULSE_MAX) {
          config.pulseMax = Wert;
          eeprom_write_word((uint16_t*)EEPROM_ADDR_PULSE_MAX, config.pulseMax);  // Speichere die Übermittelte Pulsweite Max ins EEPROM
          updateChecksum();
          Servo1.detach();  // Trenne den Servo vom Pin
          //delay(50);                                                           // Warten, damit der Servo Zeit hat, sich zu lösen
          Servo1.attach(SERVO_PIN, config.pulseMin, config.pulseMax);  // Setze den neuen PulseMin für den Servo
          Servo1.write(ServoPosition);                                 // Setze die aktuelle Position auf die neue Pulsweite
        }
        break;
      case 0b00001011:  // Speicher ServoStartPosition
        if (Wert >= config.anfang && Wert <= config.ende) {
          config.start = Wert;
          eeprom_write_byte((uint8_t*)EEPROM_ADDR_START_POSITION, config.start);  // Speichere die Übermittelte Position ins EEPROM
          updateChecksum();
        }
        break;
      case 0b00001100:  // Speicher Anfang
        if (Wert >= SERVO_ANFANG_MIN && Wert <= SERVO_ANFANG_MAX && Wert <= config.ende) {
          ServoZielPos = Wert;
          config.anfang = Wert;
          eeprom_write_byte((uint8_t*)EEPROM_ADDR_ANFANG, config.anfang);  // Speichere die Übermittelte Position ins EEPROM
          updateChecksum();
        }
        break;
      case 0b00001101:  // Speicher Ende
        if (Wert >= SERVO_ENDE_MIN && Wert <= SERVO_ENDE_MAX && Wert >= config.anfang) {
          ServoZielPos = Wert;
          config.ende = Wert;
          eeprom_write_byte((uint8_t*)EEPROM_ADDR_ENDE, config.ende);  // Speichere die Übermittelte Position ins EEPROM
          updateChecksum();
        }
        break;
      case 0b00001110:  // Speicher Geschwindigkeit
        if (Wert >= SERVO_SPEED_MIN && Wert <= SERVO_SPEED_MAX) {
          config.speed = Wert;                                           // Gültigen Wert übernehmen
          eeprom_write_byte((uint8_t*)EEPROM_ADDR_SPEED, config.speed);  // Speichere den Standardwert ins EEPROM
          updateChecksum();
        }
        break;
      case 0b00001111:  // Neue I²C-Adresse
        if (Wert >= I2C_ADRESSE_MIN && Wert <= I2C_ADRESSE_MAX) {
          config.i2cadresse = Wert;                                                 // Gültige Adresse übernehmen
          eeprom_write_byte((uint8_t*)EEPROM_ADDR_I2C_ADRESSE, config.i2cadresse);  // Speichere die Standardadresse ins EEPROM
          updateChecksum();
          Wire.end();  // Beende I²C, bevor du es neu mit der neuen Adresse startest
          delay(100);
          Wire.begin(config.i2cadresse);  // Beginne I²C mit der neuen Adresse
        }
        break;
    }
    I2C_Empfang = false;
  }

  if (ServoZielPos != ServoPosition) {
    if (!ServoAttached) {  // Wenn Servo nicht Verbunden ist wieder Verbinden.
      Servo1.attach(SERVO_PIN, config.pulseMin, config.pulseMax);
      ServoAttached = true;
    }

    if (config.speed == 0) {  // Wenn config.speed 0 ist, springe sofort zur Zielposition
      ServoPosition = ServoZielPos;
      Servo1.write(ServoPosition);  // Sofortige Position setzen
      delay(100);                   // Detach Verzögern um 100ms damit der Servo die Position verarbeiten kann
    } else {                        // Bei config.speed > 0, gehe schrittweise in Richtung Zielposition
      if ((millis() - ServoLetzteBewegung) >= config.speed || ServoLetzteBewegung > millis()) {
        if (ServoZielPos > ServoPosition) {
          ServoPosition++;  // Einen Schritt nach vorne
        } else {
          ServoPosition--;  // Einen Schritt zurück
        }
        ServoLetzteBewegung = millis();
        Servo1.write(ServoPosition);  // Neue Position setzen
      }
    }
  }

  if (ServoZielPos == ServoPosition) {            // Wen Bewegung erreicht prüfen ob Servo getrennt oder Verbunden werden muss
    if (!ServoAttached && !detachNachBewegung) {  // Wen Servo deaktiviert ist aber detachNachBewegung false ist den Servo erneut Verbinden
      Servo1.attach(SERVO_PIN, config.pulseMin, config.pulseMax);
      ServoAttached = true;
      Servo1.write(ServoPosition);
    }

    if (ServoAttached && detachNachBewegung) {  //Wen Servo Verbunden ist aber detachNachBewegung true ist dann Servo trennen
      Servo1.detach();                          // Servo trennen
      ServoAttached = false;
    }
  }


  static unsigned long letzteLEDMillis = 0;
  if (blinkeLED) {
    if (millis() - letzteLEDMillis >= 500) {  // Blinkintervall 300ms
      Toggle_Led;
      letzteLEDMillis = millis();
    }
  } else {
    if (ServoAttached) {
      VPORTA.OUT |= PIN3_bm;  // LED an
    } else {
      VPORTA.OUT &= ~PIN3_bm;  // LED aus
    }
  }
}

// =====================================
//  I²C Receive Funktion
// =====================================
void receiveEvent(int Anzahl) {
  I2C_Empfang = false;
  Wert = 0;
  //detachNachBewegung = false;  // Reset des Flags für jeden neuen Befehl

  // Erstes Byte  = FXXX BBBB (BBBB = Befehle | F für Flags | XXX ist für Optionale Flags)
  // Zweites Byte = Wert (Position, Speed oder neue I²C Adresse)
  // Drittes Byte = Zweites Byte wen Wert > 256 (ms Puls Wert)

  if (Anzahl >= 1) {
    i2cRead[0] = Wire.read();
    //detachNachBewegung = i2cRead[0] & 0b10000000;  // Prüfe auf gesetztes Detach-Bit (Bit 7)
    Befehl = i2cRead[0];  //& 0b00001111;              // Befehle extrahieren - Untere 4 Bits
    I2C_Empfang = true;

    if (Anzahl == 2) {
      i2cRead[1] = Wire.read();
      Wert = i2cRead[1];
    } else if (Anzahl == 3) {
      i2cRead[1] = Wire.read();
      i2cRead[2] = Wire.read();
      Wert = word(i2cRead[1], i2cRead[2]);
      //Wert = ((uint16_t)i2cRead[1] << 8) | i2cRead[2];
    } else if (Anzahl > 3) {
      // Mehr als erwartet -> alles lesen, aber als ungültig behandeln
      I2C_Empfang = false;
      while (Wire.available()) Wire.read();
    }
  }
}

// =====================================
//  I²C Request Funktion
// =====================================

void requestEvent() {
  // Werte in ein Byte-Array schreiben
  uint8_t antwort[12];
  antwort[0] = config.i2cadresse;  // Adresse
  antwort[1] = MODUL_ID_SERVO;     // Modulkennung (0x02 = Attiny 412 I2C Servo Controler)

  antwort[2] = ServoPosition;
  antwort[3] = config.start;
  antwort[4] = config.anfang;
  antwort[5] = config.ende;
  antwort[6] = config.speed;
  antwort[7] = ServoAttached ? 1 : 0;

  antwort[8] = highByte(config.pulseMin);
  antwort[9] = lowByte(config.pulseMin);
  antwort[10] = highByte(config.pulseMax);
  antwort[11] = lowByte(config.pulseMax);



  Wire.write(antwort, sizeof(antwort));
}

// =====================================
//  uint8_t aus dem EEPROM lesen
// =====================================

//uint8_t readEEPROMByte(uint8_t* addr, uint8_t min, uint8_t max, uint8_t defaultValue) {
uint8_t readEEPROMByte(uint8_t* addr, uint8_t min, uint8_t max) {
  uint8_t gespeicherterWert = eeprom_read_byte((uint8_t*)addr);
  if (gespeicherterWert >= min && gespeicherterWert <= max) {
    return gespeicherterWert;  // Gültigen Wert übernehmen
  } else {
    //    eeprom_write_byte((uint8_t*)addr, defaultValue);  // Ungültigen Wert durch Standardwert ersetzen
    //    return defaultValue;                              // Standardwert zurückgeben
    return 255;  // ungültig, darf nicht mit einem echten Wert kollidieren
  }
}


// =====================================
//  uint16_t aus dem EEPROM lesen
// =====================================

//uint16_t readEEPROMWord(uint16_t* addr, uint16_t min, uint16_t max, uint16_t defaultValue) {
uint16_t readEEPROMWord(uint16_t* addr, uint16_t min, uint16_t max) {
  uint16_t gespeicherterWert = eeprom_read_word((uint16_t*)addr);
  if (gespeicherterWert >= min && gespeicherterWert <= max) {
    return gespeicherterWert;  // Gültigen Wert übernehmen
  } else {
    //    eeprom_write_word((uint16_t*)addr, defaultValue);  // Ungültigen Wert durch Standardwert ersetzen
    //    return defaultValue;                               // Standardwert zurückgeben
    return 0xFFFF;  // ungültig, darf nicht mit einem echten Wert kollidieren
  }
}

// =====================================
//  Checksum berechnen und prüfen
// =====================================

bool verifyChecksum() {
  uint8_t sum = 0;

  sum ^= config.start;
  sum ^= config.anfang;
  sum ^= config.ende;
  sum ^= config.speed;
  sum ^= config.i2cadresse;

  sum ^= highByte(config.pulseMin);
  sum ^= lowByte(config.pulseMin);
  sum ^= highByte(config.pulseMax);
  sum ^= lowByte(config.pulseMax);

  return (sum == config.checksum);
}

void updateChecksum() {
  uint8_t checksum = 0;
  checksum ^= config.start;
  checksum ^= config.anfang;
  checksum ^= config.ende;
  checksum ^= config.speed;
  checksum ^= config.i2cadresse;
  checksum ^= highByte(config.pulseMin);
  checksum ^= lowByte(config.pulseMin);
  checksum ^= highByte(config.pulseMax);
  checksum ^= lowByte(config.pulseMax);
  delay(5);  // Kurze Pause, um sicheren EEPROM-Zyklus zu garantieren

  eeprom_write_byte((uint8_t*)EEPROM_ADDR_CHECKSUM, checksum);
  config.checksum = checksum;  // Aktualisiere auch im RAM
  delay(5);

  config.checksum = eeprom_read_byte((uint8_t*)EEPROM_ADDR_CHECKSUM);

  if (!verifyChecksum()) {
    while (true) {
      VPORTA.OUT |= PIN3_bm;  // LED an
      delay(100);
      VPORTA.OUT &= ~PIN3_bm;  // LED aus
      delay(100);
    }
  }
}
