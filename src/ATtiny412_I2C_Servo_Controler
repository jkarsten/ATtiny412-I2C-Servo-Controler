// =====================================
//  ATtiny412 - I¬≤C Servo Controler
// =====================================
// Chip:        "ATtiny412"
// Clock:       "20 MHz internal"
// PWN pins:    "PA1-3, 7 (default)"
// Save EEPROM: "EEPROM retained"
//
// VCC,   Pin 1
//        Pin 2, 0, PA6
// Servo, Pin 3, 1, PA7
// SDA,   Pin 4, 2, PA1
// SCL,   Pin 5, 3, PA2
// UPDI   Pin 6, 5, PA0
// LED,   Pin 7, 4, PA3
// GND,   Pin 8

// Todo¬¥s
// =======================================
// ‚úÖ Hinzuf√ºgen von attach(pin, min, max) MIN und MAX mit Speicherung im EEPROM -> Umgesetzt
//
// üîç Constrain in Switch Case Block benutzen
//
// üîç R√ºckmeldung der Werte per I¬≤C
//
// üîç Pr√ºfen das ServoAnfang <= ServoEnde bleibt
//
// ‚úÖ Detach des Servos nach erreichen des Ziels durch Flag gesteuert
//
// ‚ùå Umstellung auf writeMicroseconds -> Vorteil gering
//      -  Aufl√∂sung durch ¬µs-Steuerung	Theoretisch da, praktisch begrenzt nutzbar. Bei 1 ms um 4 ¬µs steigerung ist der Vorteil fast aufgehoben.
//      -  Zeitsteuerung in Mikrosekunden	Mit micros() machbar
//      -  Servogenauigkeit - Limitiert, feine Schritte kaum sp√ºrbar (√Ñnderungen nur bei 5‚Äì10 ¬µs)
//      -  Komplexit√§t vs Nutzen	H√∂herer Aufwand, aber geringer Mehrwert. Gr√∂√üere Variablentypen. Speicher fast am Limit.

// I¬≤C
// ---------------------------------------
#include <Wire.h>
#define I2C_ADRESSE_MIN 0x03  // Kleinste g√ºltige I2C-Adresse
#define I2C_ADRESSE_MAX 0x77  // Gr√∂√üte g√ºltige I2C-Adresse
#define I2C_BUFFER_SIZE 2     // Maximale anzahl der √ºbertragenen Bytes als Buffergr√∂√üe
uint8_t I2CAdresse = 8;       // Default I2C-Adresse
uint8_t i2cRead[I2C_BUFFER_SIZE];


// Servo
// ---------------------------------------
#include <Servo_megaTinyCore.h>
#define SERVO_ANFANG_MIN 0    // Minimum f√ºr Servo Anfang
#define SERVO_ANFANG_MAX 180  // Maximum f√ºr Servo Anfang
#define SERVO_ENDE_MIN 0      // Minimum f√ºr Servo Ende
#define SERVO_ENDE_MAX 180    // Maximum f√ºr Servo Ende
#define SERVO_SPEED_MIN 0     // Minimum f√ºr Servo Geschwindigkeit |   0 = Keine Verz√∂gerung
#define SERVO_SPEED_MAX 100   // Maximum f√ºr Servo Geschwindigkeit | 100 = 100 Millisekunden Verz√∂gerung
#define SERVO_PULSE_MIN 500   // Minimale Pulsweite in Mikrosekunden f√ºr den Servo | default 544
#define SERVO_PULSE_MAX 2500  // Maximale Pulsweite in Mikrosekunden f√ºr den Servo | default 2400

#define SERVO_PIN 1
Servo Servo1;  // create servo object to control a servo
uint8_t ServoAnfang = SERVO_ANFANG_MIN;
uint8_t ServoEnde = SERVO_ENDE_MAX;
uint8_t ServoSpeed = SERVO_SPEED_MIN;
int ServoPulseMin = SERVO_PULSE_MIN;
int ServoPulseMax = SERVO_PULSE_MAX;

uint8_t ServoStartPosition = 90;
uint8_t ServoPosition = ServoStartPosition;
uint8_t ServoZielPos = ServoStartPosition;
unsigned long ServoLetzteBewegung = 0;
bool detachNachBewegung = false;  // Flag ob Servo nach der Bewegung getrennt werden soll
bool ServoAttached = false;       // Zustand des Servos - Verbunden = true / Getrennt = false

// Allgemein
// ---------------------------------------
#include <avr/eeprom.h>
#define Toggle_Led (VPORTA.OUT ^= PIN3_bm)  // LED Wechsel um Empfang von Daten zu visualisieren
volatile uint8_t Befehl = 0;                // Zu verarbeitender Befehl
volatile int Wert = 0;                      // Wert f√ºr den Befehl (z. B. Position, Geschwindigkeit, I¬≤C Adresse)
volatile bool I2C_Empfang = false;          // Flag, dass neue Daten vorhanden sind


// =====================================
//  SETUP
// =====================================
void setup() {
  VPORTA.DIR |= PIN3_bm;  // LED PIN als Ausgang

  ServoStartPosition = readEEPROMByte((uint8_t*)0x00, SERVO_ANFANG_MIN, SERVO_ENDE_MAX, ServoStartPosition);  // ServoStartPosition aus dem EEPROM lesen
  ServoAnfang = readEEPROMByte((uint8_t*)0x01, SERVO_ANFANG_MIN, SERVO_ANFANG_MAX, SERVO_ANFANG_MIN);         // ServoAnfang aus dem EEPROM lesen
  ServoEnde = readEEPROMByte((uint8_t*)0x02, SERVO_ENDE_MIN, SERVO_ENDE_MAX, SERVO_ENDE_MAX);                 // ServoEnde aus dem EEPROM lesen
  ServoSpeed = readEEPROMByte((uint8_t*)0x03, SERVO_SPEED_MIN, SERVO_SPEED_MAX, SERVO_SPEED_MIN);             // ServoSpeed aus dem EEPROM lesen
  I2CAdresse = readEEPROMByte((uint8_t*)0x04, I2C_ADRESSE_MIN, I2C_ADRESSE_MAX, I2CAdresse);                  // I2CAdresse aus dem EEPROM lesen

  ServoPulseMin = readEEPROMWord((uint16_t*)0x05, SERVO_PULSE_MIN, SERVO_PULSE_MAX, SERVO_PULSE_MIN);  // ServoPulseMin aus dem EEPROM lesen
  ServoPulseMax = readEEPROMWord((uint16_t*)0x07, SERVO_PULSE_MIN, SERVO_PULSE_MAX, SERVO_PULSE_MAX);  // ServoPulseMax aus dem EEPROM lesen

  Wire.begin(I2CAdresse);                                  // Beginne I2C als Slave mit Adresse 8
  Wire.onReceive(receiveEvent);                            // Callback-Funktion bei Empfang von Daten
  Servo1.attach(SERVO_PIN, ServoPulseMin, ServoPulseMax);  // Servo an Pin Servo_PIN anschlie√üen (w√§hle den entsprechenden Pin)
  ServoAttached = true;
  Servo1.write(ServoStartPosition);  // ServoAnfang
  delay(100);
}

// =====================================
//  LOOP
// =====================================
void loop() {

  // Befehle
  // Gehe zu Position         XXXX 0000
  // Gehe zum Anfang          XXXX 0001
  // Gehe zum Ende            XXXX 0010
  // Setze Speed              XXXX 0100

  // Speicher Servo Puls Min  XXXX 1001
  // Speicher Servo Puls Max  XXXX 1010
  // Speicher Anfang          XXXX 1100
  // Speicher Ende            XXXX 1101
  // Speicher Geschwindigkeit XXXX 1110
  // Neue I¬≤C Adresse         XXXX 1111

  // Flag - Detach
  // Detach Servo nach Bewegung  1XXX BBBB

  if (I2C_Empfang) {                                      // Verarbeitung des Befehls
    detachNachBewegung = false;                           // Reset des Flags f√ºr jeden neuen Befehl
    detachNachBewegung = (i2cRead[0] & 0b10000000) != 0;  // Pr√ºfe auf gesetztes Detach-Bit (Bit 7)
    Befehl = Befehl & 0b00001111;                         // Befehle extrahieren - Untere 4 Bits

    switch (Befehl) {
      case 0b00000000:  // Gehe zu Position
        if (Wert >= ServoAnfang && Wert <= ServoEnde) {
          ServoZielPos = Wert;
        }
        I2C_Empfang = false;
        break;
      case 0b00000001:  // Gehe zum Anfang
        ServoZielPos = ServoAnfang;
        I2C_Empfang = false;
        break;
      case 0b00000010:  //Gehe zum Ende
        ServoZielPos = ServoEnde;
        I2C_Empfang = false;
        break;
      case 0b00000100:  // Setze Speed
        if (Wert >= SERVO_SPEED_MIN && Wert <= SERVO_SPEED_MAX) {
          ServoSpeed = Wert;
        }
        I2C_Empfang = false;
        break;
      case 0b00001001:  // Speicher Servo Puls Min
        if (Wert >= SERVO_PULSE_MIN && Wert <= SERVO_PULSE_MAX) {
          ServoPulseMin = Wert;
          eeprom_write_word((uint16_t*)0x05, ServoPulseMin);       // Speichere die √úbermittelte Pulsweite Min ins EEPROM
          Servo1.detach();                                         // Trenne den Servo vom Pin
          delay(50);                                               // Warten, damit der Servo Zeit hat, sich zu l√∂sen
          Servo1.attach(SERVO_PIN, ServoPulseMin, ServoPulseMax);  // Setze den neuen PulseMin f√ºr den Servo
          Servo1.write(ServoPosition);                             // Setze die aktuelle Position auf die neue Pulsweite
        }
        I2C_Empfang = false;
        break;
      case 0b00001010:  // Speicher Servo Puls Max
        if (Wert >= SERVO_PULSE_MIN && Wert <= SERVO_PULSE_MAX) {
          ServoPulseMax = Wert;
          eeprom_write_word((uint16_t*)0x07, ServoPulseMax);       // Speichere die √úbermittelte Pulsweite Max ins EEPROM
          Servo1.detach();                                         // Trenne den Servo vom Pin
          delay(50);                                               // Warten, damit der Servo Zeit hat, sich zu l√∂sen
          Servo1.attach(SERVO_PIN, ServoPulseMin, ServoPulseMax);  // Setze den neuen PulseMin f√ºr den Servo
          Servo1.write(ServoPosition);                             // Setze die aktuelle Position auf die neue Pulsweite
        }
        I2C_Empfang = false;
        break;
      case 0b00001011:  // Speicher ServoStartPosition
        if (Wert >= ServoAnfang && Wert <= ServoEnde) {
          ServoStartPosition = Wert;
          eeprom_write_byte((uint8_t*)0x00, Wert);  // Speichere die √úbermittelte Position ins EEPROM
        }
        I2C_Empfang = false;
        break;
      case 0b00001100:  // Speicher Anfang
        if (Wert >= SERVO_ANFANG_MIN && Wert <= SERVO_ANFANG_MAX) {
          ServoZielPos = Wert;
          ServoAnfang = Wert;
          eeprom_write_byte((uint8_t*)0x01, Wert);  // Speichere die √úbermittelte Position ins EEPROM
        }
        I2C_Empfang = false;
        break;
      case 0b00001101:  // Speicher Ende
        if (Wert >= SERVO_ENDE_MIN && Wert <= SERVO_ENDE_MAX) {
          ServoZielPos = Wert;
          ServoEnde = Wert;
          eeprom_write_byte((uint8_t*)0x02, Wert);  // Speichere die √úbermittelte Position ins EEPROM
        }
        I2C_Empfang = false;
        break;
      case 0b00001110:  // Speicher Geschwindigkeit
        if (Wert >= SERVO_SPEED_MIN && Wert <= SERVO_SPEED_MAX) {
          ServoSpeed = Wert;                        // G√ºltigen Wert √ºbernehmen
          eeprom_write_byte((uint8_t*)0x03, Wert);  // Speichere den Standardwert ins EEPROM
        }
        I2C_Empfang = false;
        break;
      case 0b00001111:  // Neue I¬≤C-Adresse
        if (Wert >= I2C_ADRESSE_MIN && Wert <= I2C_ADRESSE_MAX) {
          I2CAdresse = Wert;                              // G√ºltige Adresse √ºbernehmen
          eeprom_write_byte((uint8_t*)0x04, I2CAdresse);  // Speichere die Standardadresse ins EEPROM
          Wire.end();                                     // Beende I¬≤C, bevor du es neu mit der neuen Adresse startest
          delay(100);
          Wire.begin(I2CAdresse);  // Beginne I¬≤C mit der neuen Adresse
        }
        I2C_Empfang = false;
        break;
    }
  }

  if (ServoZielPos != ServoPosition) {
    if (!ServoAttached) {  // Wenn Servo nicht Verbunden ist wieder Verbinden.
      Servo1.attach(SERVO_PIN, ServoPulseMin, ServoPulseMax);
      ServoAttached = true;
    }

    if (ServoSpeed == 0) {  // Wenn ServoSpeed 0 ist, springe sofort zur Zielposition
      ServoPosition = ServoZielPos;
      Servo1.write(ServoPosition);  // Sofortige Position setzen
      delay(100);                   // Detach Verz√∂gern um 100ms damit der Servo die Position verarbeiten kann
    } else {                        // Bei ServoSpeed > 0, gehe schrittweise in Richtung Zielposition
      if ((millis() - ServoLetzteBewegung) >= ServoSpeed || ServoLetzteBewegung > millis()) {
        if (ServoZielPos > ServoPosition) {
          ServoPosition++;  // Einen Schritt nach vorne
        } else {
          ServoPosition--;  // Einen Schritt zur√ºck
        }
        ServoLetzteBewegung = millis();
        Servo1.write(ServoPosition);  // Neue Position setzen
      }
    }
  }

  if (ServoZielPos == ServoPosition) {  // Wen Bewegung erreicht pr√ºfen ob Servo getrennt oder Verbunden werden muss

    if (!ServoAttached && !detachNachBewegung) {  // Wen Servo deaktiviert ist aber detachNachBewegung false ist den Servo erneut Verbinden
      Servo1.attach(SERVO_PIN, ServoPulseMin, ServoPulseMax);
      ServoAttached = true;
      Servo1.write(ServoPosition);
    }

    if (ServoAttached && detachNachBewegung) {  //Wen Servo Verbunden ist aber detachNachBewegung true ist dann Servo trennen
      Servo1.detach();                          // Servo trennen
      ServoAttached = false;
    }
  }

  if (ServoAttached) {
    VPORTA.OUT |= PIN3_bm;  // LED an
  } else {
    VPORTA.OUT &= ~PIN3_bm;  // LED aus
  }
}

// =====================================
//  I¬≤C Receive Funktion
// =====================================
void receiveEvent(int Anzahl) {
  I2C_Empfang = false;
  //detachNachBewegung = false;  // Reset des Flags f√ºr jeden neuen Befehl

  // Erstes Byte  = XXXX BBBB (BBBB = Befehle | XXXX ist f√ºr Optionale Flags)
  // Zweites Byte = Wert (Position, Speed oder neue I¬≤C Adresse)
  // Drittes Byte = Zweites Byte wen Wert > 256 (ms Puls Wert)

  if (Anzahl >= 1) {
    i2cRead[0] = Wire.read();
    //detachNachBewegung = i2cRead[0] & 0b10000000;  // Pr√ºfe auf gesetztes Detach-Bit (Bit 7)
    Befehl = i2cRead[0];  //& 0b00001111;              // Befehle extrahieren - Untere 4 Bits
    I2C_Empfang = true;

    if (Anzahl == 2) {
      i2cRead[1] = Wire.read();
      Wert = i2cRead[1];
    } else if (Anzahl == 3) {
      i2cRead[1] = Wire.read();
      i2cRead[2] = Wire.read();
      Wert = word(i2cRead[1], i2cRead[2]);
    } else if (Anzahl > 3) {
      // Mehr als erwartet -> alles lesen, aber als ung√ºltig behandeln
      I2C_Empfang = false;
      while (Wire.available()) Wire.read();
    }
  }

  // if (I2C_Empfang) {
  //   Toggle_Led;
  // }
}

// =====================================
//  uint8_t aus dem EEPROM lesen
// =====================================

uint8_t readEEPROMByte(uint8_t* addr, uint8_t min, uint8_t max, uint8_t defaultValue) {
  uint8_t gespeicherterWert = eeprom_read_byte((uint8_t*)addr);
  if (gespeicherterWert >= min && gespeicherterWert <= max) {
    return gespeicherterWert;  // G√ºltigen Wert √ºbernehmen
  } else {
    eeprom_write_byte((uint8_t*)addr, defaultValue);  // Ung√ºltigen Wert durch Standardwert ersetzen
    return defaultValue;                              // Standardwert zur√ºckgeben
  }
}


// =====================================
//  uint16_t aus dem EEPROM lesen
// =====================================

uint16_t readEEPROMWord(uint16_t* addr, uint16_t min, uint16_t max, uint16_t defaultValue) {
  uint16_t gespeicherterWert = eeprom_read_word((uint16_t*)addr);
  if (gespeicherterWert >= min && gespeicherterWert <= max) {
    return gespeicherterWert;  // G√ºltigen Wert √ºbernehmen
  } else {
    eeprom_write_word((uint16_t*)addr, defaultValue);  // Ung√ºltigen Wert durch Standardwert ersetzen
    return defaultValue;                               // Standardwert zur√ºckgeben
  }
}
